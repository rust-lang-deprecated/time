name: Build

on:
  push:
    branches: ["**"]
    tags-ignore: ["**"]
    paths-ignore:
      - "**.md"
      - LICENSE-Apache
      - LICENSE-MIT
  pull_request:
    paths-ignore:
      - "**.md"
      - LICENSE-Apache
      - LICENSE-MIT
  schedule:
    - cron: "0 0 * * 6" # midnight on Saturdays

jobs:
  check-other-targets:
    name: Type checking
    runs-on: ubuntu-latest
    strategy:
      matrix:
        rust: [1.36.0, stable]
        target:
          - { triple: x86_64-unknown-netbsd, std: true }
          - { triple: x86_64-sun-solaris, std: true }
          - { triple: wasm32-wasi, std: true }
          - { triple: thumbv7em-none-eabihf, std: false }
        exclude:
          - # Solaris target did not exist in previous rust
            rust: 1.36.0
            target: { triple: x86_64-sun-solaris, std: true }

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache installed binaries
        uses: actions/cache@v2
        id: cache-binaries
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-hack-0.4.1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target.triple }}
          override: true

      - name: Install cargo-hack
        run: cargo +stable install cargo-hack --version ^0.4.1
        if: steps.cache-binaries.outputs.cache-hit != 'true'

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.target.triple }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Check feature powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --no-dev-deps
            --feature-powerset
            --optional-deps
            --group-features serde,rand
            --exclude-features default,libc,winapi,std,local-offset,time-macros,quickcheck,quickcheck-dep
            --exclude-all-features
            --target ${{ matrix.target.triple }}
        if: matrix.target.std == false

      - name: Check feature powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --no-dev-deps
            --feature-powerset
            --optional-deps
            --group-features serde,rand,quickcheck
            --exclude-features default,libc,winapi,time-macros,quickcheck-dep
            --target ${{ matrix.target.triple }}
        if: matrix.target.std == true

  check-benchmarks:
    name: Type-check benchmarks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Change directories
        run: cd time-benchmarks

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-cargo-stable-benchmarks-${{ hashFiles('**/Cargo.toml') }}

      - name: Type-check benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --benches

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        rust: [1.36.0, stable]
        os: [ubuntu-latest, windows-latest, macOS-latest]

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Cache installed binaries
        uses: actions/cache@v2
        id: cache-binaries
        with:
          path: ~/.cargo/bin
          key: ${{ runner.os }}-cargo-hack-0.4.1

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Install cargo-hack
        run: cargo +stable install cargo-hack --version ^0.4.1
        if: steps.cache-binaries.outputs.cache-hit != 'true'

      # This is a workaround for a known bug in GitHub Actions. See
      # actions/cache#403 and rust-lang/cargo#8603 for details.
      - name: Install GNU tar
        run: |
          brew install gnu-tar
          echo "::add-path::/usr/local/opt/gnu-tar/libexec/gnubin"
        if: matrix.os == 'macOS-latest'

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.os }}-${{ hashFiles('**/Cargo.toml') }}2

      # For speed reasons, it's worth it to just check the feature powerset and
      # test with everything enabled. As features are additive, the tests ensure
      # that everything works, while the checking ensures any combination would
      # compile without issue. Where I am confident features do not interact in
      # any way, the features are grouped to reduce the size of the powerset.

      - name: Check feature powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --feature-powerset
            --optional-deps
            --group-features serde,rand,quickcheck
            --exclude-features default,libc,winapi,time-macros,quickcheck-dep

      - name: Test (--all-features)
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  fmt:
    name: Formatting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Run `cargo fmt -- --check`
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-latest-cargo-stable-ubuntu-latest-${{ hashFiles('**/Cargo.toml') }}

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  documentation:
    name: Documentation
    runs-on: ubuntu-latest
    # ensure docs only get pushed if everything else is successful
    needs:
      - check-other-targets
      - check-benchmarks
      - test
      - fmt
      - clippy
    if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.master_branch)

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Build documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features
        env:
          RUSTFLAGS: --cfg __time_02_docs
          RUSTDOCFLAGS: --cfg __time_02_docs

      - name: Publish documentation
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: gh-pages
          FOLDER: target/doc
          SINGLE_COMMIT: true
