name: Build

on:
  push:
    branches: ["**"]
    tags-ignore: ["**"]
    paths-ignore:
      - "**.md"
      - LICENSE-Apache
      - LICENSE-MIT
  pull_request:
    paths-ignore:
      - "**.md"
      - LICENSE-Apache
      - LICENSE-MIT

jobs:
  check-other-targets:
    name: Type checking (${{ matrix.target.name }}, ${{ matrix.rust }})
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        rust: ["1.46", stable]
        target:
          - { name: NetBSD, triple: x86_64-unknown-netbsd, has_std: true }
          - { name: Solaris, triple: x86_64-sun-solaris, has_std: true }
          - { name: wasi, triple: wasm32-wasi, has_std: true }
          - { name: embedded, triple: thumbv7em-none-eabihf, has_std: false }

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          target: ${{ matrix.target.triple }}
          override: true

      - name: Install cargo-hack
        shell: bash
        run: |
          curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-x86_64-unknown-linux-gnu.tar.gz | tar xzf - -C ~/.cargo/bin

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.target.triple }}-${{ hashFiles('**/Cargo.toml') }}

      - name: Check feature powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --no-dev-deps
            --feature-powerset
            --optional-deps
            --group-features serde,rand
            --exclude-features default,winapi,std,local-offset,time-macros,quickcheck,quickcheck-dep
            --exclude-all-features
            --features const_fn
            --target ${{ matrix.target.triple }}
        if: matrix.target.has_std == false

      - name: Check feature powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --no-dev-deps
            --feature-powerset
            --optional-deps
            --group-features serde,rand
            --exclude-features default,winapi,time-macros,quickcheck-dep
            --features const_fn
            --target ${{ matrix.target.triple }}
        if: matrix.target.has_std == true

  check-benchmarks:
    name: Type-check benchmarks
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Change directories
        run: cd time-benchmarks

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-20.04-cargo-stable-benchmarks-${{ hashFiles('**/Cargo.toml') }}

      - name: Type-check benchmarks
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --benches --all-features

  test:
    name: Test (${{ matrix.os.name }}, ${{ matrix.rust }})
    runs-on: ${{ matrix.os.value }}
    strategy:
      matrix:
        rust: ["1.46", stable]
        os:
          - { name: Ubuntu, value: ubuntu-20.04 }
          - { name: Windows, value: windows-latest }
          - { name: MacOS, value: macOS-latest }

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.rust }}
          override: true

      - name: Install cargo-hack
        shell: bash
        run: |
          host=$(rustc -Vv | grep host | sed 's/host: //')
          if [[ $host =~ windows ]]; then
              curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${host}.zip -o cargo-hack.zip
              7z x cargo-hack.zip -o$HOME/.cargo/bin
          elif [[ $host =~ darwin|linux ]]; then
              curl -LsSf https://github.com/taiki-e/cargo-hack/releases/latest/download/cargo-hack-${host}.tar.gz | tar xzf - -C ~/.cargo/bin
          else
              echo "unsupported operating system"
              exit 1
          fi

      # This is a workaround for a known bug in GitHub Actions. See
      # actions/cache#403 and rust-lang/cargo#8603 for details.
      - name: Install GNU tar
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
        if: matrix.os.value == 'macOS-latest'

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ matrix.os.value }}-${{ hashFiles('**/Cargo.toml') }}2

      # For speed reasons, it's worth it to just check the feature powerset and
      # test with everything enabled. As features are additive, the tests ensure
      # that everything works, while the checking ensures any combination would
      # compile without issue. Where I am confident features do not interact in
      # any way, the features are grouped to reduce the size of the powerset.

      - name: Check feature powerset
        uses: actions-rs/cargo@v1
        with:
          command: hack
          args: |
            check
            --feature-powerset
            --optional-deps
            --group-features serde,rand
            --exclude-features default,winapi,time-macros,quickcheck-dep
            --features const_fn

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  fmt:
    name: Formatting
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true
          components: rustfmt

      - name: Check formatting
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout sources
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ubuntu-20.04-cargo-stable-ubuntu-20.04-${{ hashFiles('**/Cargo.toml') }}

      - name: Run clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

  documentation:
    name: Documentation
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

      - name: Cache cargo output
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: cargo-doc-${{ hashFiles('**/Cargo.toml') }}2

      - name: Build documentation
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --all-features
        env:
          RUSTDOCFLAGS: --cfg __time_03_docs

      - name: Create top-level redirect
        run: |
          echo "<meta http-equiv='refresh' content='0; url=https://time-rs.github.io/time'>" >> ./target/doc/index.html

      - name: Publish documentation
        uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          BRANCH: main
          FOLDER: target/doc
          SINGLE_COMMIT: true
          REPOSITORY_NAME: time-rs/time-rs.github.io
        if: github.event_name == 'push' && github.ref == format('refs/heads/{0}', github.event.repository.master_branch)
